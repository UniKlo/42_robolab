FeatureScript 1096;
import(path : "onshape/std/geometry.fs", version : "1096.0");


annotation { "Feature Type Name" : "LEGO" }

export const myLEGO = defineFeature(function(context is Context, id is Id, definition is map)
    precondition
    {
        annotation { "Name" : "Rows" }
        isInteger(definition.rows, POSITIVE_COUNT_BOUNDS);
        annotation { "Name" : "Columns" }
        isInteger(definition.columns, POSITIVE_COUNT_BOUNDS);
        annotation { "Name" : "sq_width" }
        isLength(definition.sq_width, LENGTH_BOUNDS);
        annotation { "Name" : "Stud Text" }
        definition.text is boolean;

    }
    {
        var lego;
        var sq_width = definition.sq_width / millimeter;
        var sq_height = sq_width * 6 / 5;
        var sq_thick = sq_width / 5;

        lego = newSketch(context, id + "lego", {
                    "sketchPlane" : qCreatedBy(makeId("Top"), EntityType.FACE)
                });

        skRectangle(lego, "rectangle1", {
                    "firstCorner" : vector(0, (sq_width * definition.rows)) * millimeter,
                    "secondCorner" : vector((sq_width * definition.columns), 0) * millimeter
                });
        skSolve(lego);

        extrude(context, id + "legoExtrude", {
                    "entities" : qSketchRegion(id + "lego"),
                    "endBound" : BoundingType.BLIND,
                    "depth" : sq_height * millimeter,
                    "defaultScope" : false,
                    "operationType" : NewBodyOperationType.NEW
                });

        var studs;
        var studText;
        var studInnerIndent;
        var innerSupportColumn;
        var innerSupport;

        // Studs on top face of the extruded base
        studs = newSketch(context, id + "studs", {
                    "sketchPlane" : qNthElement(qCreatedBy(id + "legoExtrude", EntityType.FACE), 2)
                });
        if (definition.text)
        {
            // Stud Text on top face of the extruded base
            studText = newSketch(context, id + "studText", {
                        "sketchPlane" : qNthElement(qCreatedBy(id + "legoExtrude", EntityType.FACE), 2)
                    });
        }

        // Inner support and stud indent from the top face of the extruded base
        studInnerIndent = newSketch(context, id + "studInnerIndent", {
                    "sketchPlane" : qNthElement(qCreatedBy(id + "legoExtrude", EntityType.FACE), 2)
                });
        innerSupport = newSketch(context, id + "innerSupport", {
                    "sketchPlane" : qNthElement(qCreatedBy(id + "legoExtrude", EntityType.FACE), 2)
                });
        // Inner supports from the top face of the extruded base
        innerSupportColumn = newSketch(context, id + "innerSupportColumn", {
                    "sketchPlane" : qNthElement(qCreatedBy(id + "legoExtrude", EntityType.FACE), 2)
                });

        var c;
        var r;
        var studCount = 0;
        var constraintMap = {};
        
        for (c = 0; c < definition.columns; c += 1)
        {
            for (r = 0; r < definition.rows; r += 1)
            {

                // Add a stud for every row and column
                skCircle(studs, "circle1" ~ studCount, {
                            "center" : vector(sq_width/2 + (c * sq_width), sq_width/2 + (r * sq_width)) * millimeter,
                            "radius" : 2.4 * millimeter
                        });

                // Inner indentation for studs
                skCircle(studInnerIndent, "circle2" ~ studCount, {
                            "center" : vector(sq_width/2 + (c * sq_width), sq_width/2 + (r * sq_width)) * millimeter,
                            "radius" : 0.8 * millimeter
                        });


                // Add text on studs
                if (definition.text)
                {
                    var textName;

                    textName = "text1" ~ studCount;

                    skText(studText, textName, {
                                "fontName" : "OpenSans-Regular.ttf",
                                "text" : "LEGO" });
                    constraintMap[textName] = [0.0045 + (c * 0.008), 0.0025 + (r * 0.008), 0, 0.0002, 0.0009];
                }

                // Add interior supports when the brick size is at least 2x2
                if (definition.columns > 1 && definition.rows > 1)
                {
                    if ((r < definition.rows - 1) && (c < definition.columns - 1))
                    {
                        skCircle(innerSupportColumn, "circle3a" ~ studCount, {
                                    "center" : vector((c + 1) * sq_width, (r + 1) * sq_width) * millimeter,
                                    "radius" : 3.2 * millimeter
                                });
                        skCircle(innerSupportColumn, "circle3b" ~ studCount, {
                                    "center" : vector((c + 1) * sq_width, (r + 1) * sq_width) * millimeter,
                                    "radius" : 2.4 * millimeter
                                });

                    }
                }
                else
                {
                    // Varied interior supports when there is only one column
                    if ((definition.columns % 2 == 1) && (r < definition.rows - 1) && definition.rows > 1)
                    {
                        skCircle(innerSupportColumn, "circle3a" ~ studCount, {
                                    "center" : vector(sq_width/2 + c * sq_width, (r + 1) * sq_width) * millimeter,
                                    "radius" : 1.6 * millimeter
                                });

                        skRectangle(innerSupport, "rectangle3a" ~ studCount, {
                                    "firstCorner" : vector(c * sq_width, (r + 1) * sq_width) * millimeter,
                                    "secondCorner" : vector((c + 1) * sq_width, (r + 1) * sq_width) * millimeter
                                });
                    }
                    else if ((definition.rows % 2 == 1) && (c < definition.columns - 1) && definition.columns > 1)
                    {
                        skCircle(innerSupportColumn, "circle3a" ~ studCount, {
                                    "center" : vector((c + 1) * sq_width, sq_width / 2 + r * sq_width) * millimeter,
                                    "radius" : 1.6 * millimeter
                                });

                        skRectangle(innerSupport, "rectangle3a" ~ studCount, {
                                    "firstCorner" : vector((c + 1) * sq_width, r * sq_width) * millimeter,
                                    "secondCorner" : vector((c + 1) * sq_width, (r + 1) * sq_width) * millimeter
                                });

                    }
                }
                studCount += 1;
            }

        }

        skSolve(studs);
        if (definition.text)
        {
            skSetInitialGuess(studText, constraintMap);
            skSolve(studText);
        }
        skSolve(studInnerIndent);
        skSolve(innerSupport);
        skSolve(innerSupportColumn);

        shell(context, id + "shell1", {
                    "isHollow" : false,
                    "entities" : qUnion([qNthElement(qCreatedBy(id + "legoExtrude", EntityType.FACE), 1)]),
                    "thickness" : 1.6 * millimeter
                });

        // Extrude remove inner stud indent
        extrude(context, id + "studInnerIndentExtrude", {
                    "entities" : qSketchRegion(id + "studInnerIndent"),
                    "endBound" : BoundingType.BLIND,
                    "operationType" : NewBodyOperationType.REMOVE,
                    "oppositeDirection" : true,
                    "depth" : 1.6 * millimeter,
                    "defaultScope" : false,
                    "booleanScope" : qUnion([qCreatedBy(id + "legoExtrude", EntityType.BODY)])
                });

        // Extrude add inner stud indent
        extrude(context, id + "studsExtrude", {
                    "entities" : qSketchRegion(id + "studs"),
                    "endBound" : BoundingType.BLIND,
                    "operationType" : NewBodyOperationType.ADD,
                    "depth" : 1.6 * millimeter,
                    "hasSecondDirection" : true,
                    "secondDirectionBound" : SecondDirectionBoundingType.BLIND,
                    "secondDirectionOppositeDirection" : true,
                    "secondDirectionBoundEntity" : qUnion([]),
                    "secondDirectionDepth" : 0.05 * centimeter,
                    "defaultScope" : false,
                    "booleanScope" : qUnion([qCreatedBy(id + "legoExtrude", EntityType.BODY)])
                });


        // Extrude the inner column supports when appropriate
        if (!(definition.rows == 1 && definition.columns == 1))
        {
            extrude(context, id + "innerSupportColumnExtrude", {
                        "entities" : qSketchRegion(id + "innerSupportColumn", true),
                        "endBound" : BoundingType.BLIND,
                        "operationType" : NewBodyOperationType.ADD,
                        "oppositeDirection" : true,
                        "depth" : 9.6 * millimeter,
                        "defaultScope" : false,
                        "booleanScope" : qUnion([qCreatedBy(id + "legoExtrude", EntityType.BODY)])
                    });
        }

        // Extrude the text on studs if present
        if (definition.text)
        {
            extrude(context, id + "studTextExtrude", {
                        "entities" : qSketchRegion(id + "studText", true),
                        "endBound" : BoundingType.BLIND,
                        "operationType" : NewBodyOperationType.REMOVE,
                        "depth" : 2 * millimeter,
                        "defaultScope" : false,
                        "booleanScope" : qUnion([qCreatedBy(id + "legoExtrude", EntityType.BODY)])
                    });
            deleteBodies(context, id + "studTextDelete", {
                        "entities" : qCreatedBy(id + "studText", EntityType.BODY)
                    });
        }

        opDeleteBodies(context, id + "rmstuds", {
                    "entities" : qCreatedBy(id + "studs"),
                });
        opDeleteBodies(context, id + "rmstudInnerIndent", {
                    "entities" : qCreatedBy(id + "studInnerIndent"),
                });
        opDeleteBodies(context, id + "rmInnerSupport", {
                    "entities" : qCreatedBy(id + "innerSupport"),
                });
        opDeleteBodies(context, id + "rminnerSupportColumn", {
                    "entities" : qCreatedBy(id + "innerSupportColumn"),
                });
    });

