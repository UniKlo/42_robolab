FeatureScript 1096;
import(path : "onshape/std/geometry.fs", version : "1096.0");

mycu::import(path : "22bab230d965d1f2e75baa35", version : "3b8e301644401b3aea3b453e");


annotation { "Feature Type Name" : "sampling" }
export const sampling = defineFeature(function(context is Context, id is Id, definition is map)
    precondition
    {
        annotation { "Name" : "qty" }
        isInteger(definition.qty, { (unitless) : [0, 1, 6] } as IntegerBoundSpec);
        annotation { "Name" : "increment" }
        isAnything(definition.increment);
        annotation { "Name" : "gap" }
        isInteger(definition.gap, POSITIVE_COUNT_BOUNDS);
    }
    {
        const instantiator = newInstantiator(id + "inst", {});


        var i = 0;
        var step = definition.increment/definition.qty;
        for (var oneoffset = step; oneoffset <= definition.increment; oneoffset += step)
        {
         debug(context, oneoffset);   
            addInstance(instantiator, mycu::build, {"configuration": { "offset" : oneoffset * millimeter }, "transform" : transform(vector(i*definition.gap, 0, 0)*inch )});
            i += 1;
        }
        
        print(definition);
        instantiate(context, instantiator);
    });
